{"ast":null,"code":"import { ValidationErrorsAnimations } from \"../validationErrors.animations\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../translate/translate.server.pipe\";\nconst _c0 = [\"serverFieldErrorText\"];\nfunction ServerFieldErrorComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"span\", null, 2);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"ts\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@errorMessagesAnimation\", undefined);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 2, ctx_r0.errorCode, ctx_r0.errorMessage), \" \");\n  }\n}\nexport let ServerFieldErrorComponent = /*#__PURE__*/(() => {\n  class ServerFieldErrorComponent {\n    constructor(renderer) {\n      this.renderer = renderer;\n      this.title = 'Error message(s) from server used for single field(s)';\n      this.fieldRef = \"\";\n      this.errorCode = \"\";\n      this.errorMessage = \"\";\n    }\n    // TODO preco tu proste nejde vlozit parent kontext a sledovat changes na nom pomocou\n    //  subscribe\n    ngOnChanges(changes) {\n      // TODO zbavit sa neurcitych typov ak to je mozne\n      let fieldErrorsObject = this.errorsObject[this.fieldRef];\n      if (fieldErrorsObject !== null && fieldErrorsObject !== undefined) {\n        // TODO skaredy hack, ale zatial z backendu viac ako jedna chyba na jedno policko naraz nepride\n        let e = fieldErrorsObject[0];\n        if (this.errorCode == e['code']) {\n          // bounce\n          this.renderer.addClass(this.serverErrorSpanElem.nativeElement, 'blink');\n          setTimeout(() => {\n            this.renderer.removeClass(this.serverErrorSpanElem.nativeElement, 'blink');\n          }, 500);\n        } else {\n          // zobrazit\n          console.log(e['code']);\n          this.errorCode = e['code'];\n          this.errorMessage = e['message'];\n        }\n      } else {\n        // schovat error\n        this.errorCode = \"\";\n      }\n    }\n  }\n  ServerFieldErrorComponent.ɵfac = function ServerFieldErrorComponent_Factory(t) {\n    return new (t || ServerFieldErrorComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  ServerFieldErrorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ServerFieldErrorComponent,\n    selectors: [[\"app-server-field-error\"]],\n    viewQuery: function ServerFieldErrorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.serverErrorSpanElem = _t.first);\n      }\n    },\n    inputs: {\n      fieldRef: \"fieldRef\",\n      errorsObject: \"errorsObject\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"errorPlaceholder\", 4, \"ngIf\"], [1, \"errorPlaceholder\"], [\"serverFieldErrorText\", \"\"]],\n    template: function ServerFieldErrorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ServerFieldErrorComponent_div_0_Template, 5, 5, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.errorCode !== \"\");\n      }\n    },\n    dependencies: [i1.NgIf, i2.TranslationServerPipe],\n    styles: [\"div.errorPlaceholder[_ngcontent-%COMP%]{text-align:left;max-height:3em}div.errorPlaceholder[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:.875em;font-weight:400;display:inline-block;line-height:1.25em;margin:.25em;padding:.25em;color:#000;background-color:transparent;transition:transform .125s ease-in-out;text-align:left}div.errorPlaceholder[_ngcontent-%COMP%]   span.blink[_ngcontent-%COMP%]{transform:scale(1.1)}div.errorPlaceholder[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:before{content:\\\"!\\\";display:inline-block;font-weight:700;background-color:#d00;color:#fff;border-radius:2em;width:1em;height:1em;line-height:1em;text-align:center;border:.125em solid #ebf6ff;position:relative;bottom:1px}\"],\n    data: {\n      animation: [ValidationErrorsAnimations.errorMessagesAnimation]\n    }\n  });\n  return ServerFieldErrorComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}