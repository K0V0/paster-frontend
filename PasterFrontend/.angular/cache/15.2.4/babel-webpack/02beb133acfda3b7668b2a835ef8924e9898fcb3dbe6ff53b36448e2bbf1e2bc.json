{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let WidgetsService = /*#__PURE__*/(() => {\n  class WidgetsService {\n    constructor() {\n      this.widgetStates = new Map();\n      this.openedState = new Subject();\n      this.blocked = false;\n    }\n    getStates() {\n      return this.widgetStates;\n    }\n    clearAll() {\n      this.widgetStates.clear();\n      this.emitStateEvent();\n    }\n    toggleState(url) {\n      this.clearOtherSetGiven(url);\n      this.setState(url, !this.getState(url));\n      this.emitStateEvent();\n    }\n    getStateObservable() {\n      return this.openedState;\n    }\n    isWidgetUrl(url) {\n      return WidgetsService.widgetsUrls.includes(url);\n    }\n    setBlocked(bool) {\n      this.blocked = bool;\n    }\n    isBlocked() {\n      return this.blocked;\n    }\n    emitStateEvent() {\n      this.openedState.next(this.isAnyActive());\n    }\n    isAnyActive() {\n      for (let key of Array.from(this.widgetStates.keys())) {\n        if (this.widgetStates.get(key) === true) {\n          return true;\n        }\n      }\n      return false;\n    }\n    setState(url, state) {\n      this.widgetStates.set(url, state);\n    }\n    getState(url) {\n      return this.widgetStates.get(url) || false;\n    }\n    clearOtherSetGiven(url) {\n      for (let key of Array.from(this.widgetStates.keys())) {\n        if (key != url) {\n          this.widgetStates.set(key, false);\n        }\n      }\n    }\n  }\n  WidgetsService.widgetsUrls = [\"/register\", \"/login\", \"/logout\", \"/language\", \"/cookies\"];\n  WidgetsService.ɵfac = function WidgetsService_Factory(t) {\n    return new (t || WidgetsService)();\n  };\n  WidgetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WidgetsService,\n    factory: WidgetsService.ɵfac,\n    providedIn: 'root'\n  });\n  return WidgetsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}