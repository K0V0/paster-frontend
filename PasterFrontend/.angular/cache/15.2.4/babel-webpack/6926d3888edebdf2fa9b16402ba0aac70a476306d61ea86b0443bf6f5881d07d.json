{"ast":null,"code":"export class BaseComponent {\n  constructor(router) {\n    this.serverFieldsErrorMessages = {};\n    this.serverFormErrorMessage = {};\n    this.router = router;\n  }\n  clearAllServerErrors() {\n    this.clearFormServerError();\n    this.clearfieldsServerErrors();\n  }\n  clearFormServerError() {\n    this.serverFormErrorMessage = {};\n  }\n  clearfieldsServerErrors() {\n    this.serverFieldsErrorMessages = {};\n  }\n  setFormServerError(error) {\n    let e;\n    if ((e = error.error.code) != null) {\n      // treba zabalit do objektu lebo primitivny typ nespusti ngOnChange() akciu ak sa\n      // jeho obsah nezmeni, co kvoli logike aplikacie tuna chcem\n      this.serverFormErrorMessage = {\n        form: e\n      };\n    }\n  }\n  setFieldsServerErrors(errors) {\n    let e;\n    if ((e = errors.error.messages) != null) {\n      // todo vyparsocat vsetky error cody v array, rovno prelozit. ak nie tak vyplut default message zo serveru\n      this.serverFieldsErrorMessages = e;\n    }\n  }\n  setAllServerErrors(errors) {\n    this.setFormServerError(errors);\n    this.setFieldsServerErrors(errors);\n  }\n  get serverFieldsErrors() {\n    return this.serverFieldsErrorMessages;\n  }\n  get serverFormError() {\n    return this.serverFormErrorMessage;\n  }\n  redirectWithRefresh() {\n    window.location.reload();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}