{"ast":null,"code":"import * as lang_en from 'src/assets/i18n/en.json';\nimport * as lang_sk from 'src/assets/i18n/sk.json';\nimport * as lang_ua from 'src/assets/i18n/ua.json';\nimport { LanguagesList } from './../../../_Base/config/languages.list';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../../_CoreModule/services/local-storage.service\";\nexport let TranslateService = /*#__PURE__*/(() => {\n  class TranslateService {\n    constructor(localStorageService) {\n      this.localStorageService = localStorageService;\n      console.log(\"ideeeeeem\");\n      this.userSystemPrefferedLanguages = [];\n      this.currentLang = LanguagesList.FALLBACK_LANG;\n      this.vocab = [];\n    }\n    readVocabFiles() {\n      //TODO hnus najvacsi, ale neviem ako zatial pristupovat ku konstantam podla nazvu ulozeneho v premennej\n      let languageFile;\n      switch (this.currentLang) {\n        case 'sk':\n          {\n            languageFile = lang_sk;\n            break;\n          }\n        case 'en':\n          {\n            languageFile = lang_en;\n            break;\n          }\n        case 'ua':\n          {\n            languageFile = lang_ua;\n            break;\n          }\n        default:\n          {\n            languageFile = lang_en;\n            break;\n          }\n      }\n      this.vocab.push(languageFile[this.currentLang]);\n    }\n    findAndSetLang() {\n      let storedLang = this.getStoredLang();\n      // return stored (set) language\n      if (storedLang != null) {\n        this.currentLang = storedLang;\n        return;\n      }\n      // try to match lang from browser supported languages list\n      if (navigator.languages !== undefined) {\n        this.userSystemPrefferedLanguages = navigator.languages.map(lang => lang.trim().split(/-|_/)[0]);\n        for (let lang of this.userSystemPrefferedLanguages) {\n          // if something better than default language is found in supported list returned by browser\n          if (lang !== LanguagesList.FALLBACK_LANG) {\n            this.localStorageService.set(\"language\", LanguagesList.getBestSuitedLang(lang));\n            this.currentLang = lang;\n            break;\n          }\n        }\n      }\n    }\n    getStoredLang() {\n      return this.localStorageService.get(\"language\");\n    }\n    getCurrentLang() {\n      let storedLang = this.getStoredLang();\n      if (storedLang !== null) {\n        return storedLang;\n      }\n      return this.currentLang;\n    }\n    setLang(countryCode) {\n      if (LanguagesList.containsLanguage(countryCode)) {\n        this.localStorageService.set(\"language\", countryCode);\n        this.currentLang = countryCode;\n      }\n    }\n    translate(path, defaultTranslation = undefined) {\n      if (defaultTranslation === null) {\n        defaultTranslation = undefined;\n      }\n      let parts = path.split('.');\n      let tmp = this.vocab[0];\n      if (tmp != undefined) {\n        parts.forEach(part => {\n          if (Object.keys(tmp).indexOf(part) >= 0) {\n            tmp = tmp[part];\n          }\n        });\n      }\n      if (tmp === undefined || tmp.constructor.name !== \"String\" && defaultTranslation === undefined) {\n        return path;\n      }\n      if (tmp.constructor.name !== \"String\" && defaultTranslation !== undefined && defaultTranslation.length > 0) {\n        return defaultTranslation;\n      }\n      return tmp;\n    }\n    translateServer(path, defaultTranslation = undefined) {\n      path = \"server.\" + path;\n      return this.translate(path, defaultTranslation);\n    }\n  }\n  TranslateService.ɵfac = function TranslateService_Factory(t) {\n    return new (t || TranslateService)(i0.ɵɵinject(i1.LocalStorageService));\n  };\n  TranslateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TranslateService,\n    factory: TranslateService.ɵfac,\n    providedIn: 'root'\n  });\n  return TranslateService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}