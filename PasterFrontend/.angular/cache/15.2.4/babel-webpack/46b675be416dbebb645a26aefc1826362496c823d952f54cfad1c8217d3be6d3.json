{"ast":null,"code":"import { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/jwt.service\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(JwtService) {\n      this.JwtService = JwtService;\n    }\n    intercept(req, next) {\n      console.log(\"intercept()\");\n      if (this.applyFilter(req.url)) {\n        return next.handle(req.clone({\n          setHeaders: {\n            \"Authorization\": this.JwtService.getTokenWithPrefix()\n          }\n        }));\n      } else {\n        return next.handle(req);\n      }\n    }\n    applyFilter(requestUrl) {\n      // TODO zamenit obycajne replace za regex zo stringu ktory bude zamienat\n      //  iba ak cast ktoru treba zamenit (odmazat) sa nachadza vylucne na zaciatku retazca\n      let endpointToFilter = requestUrl.replace(environment.backendUrl + \"/api/v\" + environment.apiVersion, \"\");\n      let isNotFiltered = false;\n      // is on the list of NOT filtered endpoints\n      environment.excludedJwtInterceptorEndpoints.forEach(endpoint => {\n        if (endpoint.indexOf(endpointToFilter) == 0) {\n          isNotFiltered = true;\n        }\n      });\n      return !isNotFiltered;\n    }\n  }\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.JwtService));\n  };\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return JwtInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}